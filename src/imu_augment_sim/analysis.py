"""Load and post-process results generated by OpenSim."""

import os
import pandas as pd
import numpy as np
import opensim as osim
import xml.etree.ElementTree as ET


def read_sto_file(filename, sep=None):
    """Read an OpenSim ``.sto`` file into a :class:`pandas.DataFrame`.

    Parameters
    ----------
    filename : str or Path
        Path to the ``.sto`` file.
    sep : str or None, optional
        Column separator used in the file. If ``None`` whitespace is used.

    Returns
    -------
    pandas.DataFrame
        Parsed data including the header section.
    """

    if not os.path.exists(filename):
        raise FileNotFoundError(f"File '{filename}' does not exist.")

    with open(filename, 'r') as file:
        all_lines = file.readlines()

    line_idx = 0

    # read header
    next_line = all_lines[line_idx]
    header = [next_line]
    while not 'endheader' in next_line:
        line_idx += 1
        next_line = all_lines[line_idx]
        header.append(next_line)

    line_idx += 1

    # process column labels
    next_line = all_lines[line_idx]
    if next_line.isspace() == True:
        line_idx += 1
        next_line = all_lines[line_idx]

    labels = next_line.split(sep=sep)
    if '\n' in labels:
        labels.remove('\n')
    line_idx += 1

    # get data
    data = []
    while line_idx < all_lines.__len__():
        d = [x for x in all_lines[line_idx].split(sep=sep)]
        if '\n' in d:
            d.remove('\n')
        data.append(d)
        line_idx += 1

    measured_data = pd.DataFrame(data=data, columns=labels).astype('float', errors='ignore')
    return measured_data


def __adapt_analysis_settings(
    analyzer_settings_path, model_path, analyzer_results_path, coordinates_file_name
):
    """Update paths within an OpenSim analysis settings XML file.

    Parameters
    ----------
    analyzer_settings_path : Path
        Path to the analysis settings template.
    model_path : Path
        OpenSim model used for IK.
    analyzer_results_path : Path
        Directory where analysis results are written.
    coordinates_file_name : Path
        File with joint coordinates from the IK step.
    """
    tree = ET.parse(analyzer_settings_path)
    root = tree.getroot()
    b2tf = root.find("./AnalyzeTool/results_directory")
    b2tf.text = str(analyzer_results_path)
    b2tf = root.find("./AnalyzeTool/model_file")
    b2tf.text = str(model_path)
    b2tf = root.find("./AnalyzeTool/coordinates_file")
    b2tf.text = str(coordinates_file_name)
    tree.write(analyzer_settings_path)
    return


def perform_analysis(analyzer_settings_path, model_path, analyzer_results_path, coordinates_file_name):
    """Run OpenSim's analysis tool on previously generated IK results.

    Parameters
    ----------
    analyzer_settings_path : Path
        Path to the analysis settings XML template.
    model_path : Path
        OpenSim model file used during IK.
    analyzer_results_path : Path
        Directory to store the analysis outputs in.
    coordinates_file_name : Path
        File containing joint coordinates from the IK step.
    """
    __adapt_analysis_settings(analyzer_settings_path, model_path, analyzer_results_path, coordinates_file_name)
    analysis_tool = osim.AnalyzeTool(str(analyzer_settings_path))
    analysis_tool.run()
    return


def read_positions(positions_file_path):
    """Load marker positions from an OpenSim ``.sto`` file.

    Parameters
    ----------
    positions_file_path : Path or str
        Path to the ``Analyzer_OutputsVec3.sto`` file produced by OpenSim.

    Returns
    -------
    pandas.DataFrame
        Table with timestamp and marker position columns.
    """

    df = read_sto_file(positions_file_path)
    rows = df.shape[0]
    cols = 1 + ((df.shape[1] - 1) * 3)
    new_data = np.zeros((rows, cols))
    new_column_names = []
    col_idx = 0
    for c in df.columns:
        if c == 'time':
            new_data[:, col_idx] = df[c]
            new_column_names.append('timestamps')
            col_idx += 1
        else:
            # split x,y,z coordinates, convert to double and add to new_data np array
            new_col_data = [r.split(',') for r in df[c]]
            new_col_data = np.array(new_col_data).astype('double')
            new_data[:, col_idx:col_idx + 3] = new_col_data
            col_idx += 3

            # add new col names
            col_name = c.split('/')[2].split('|')[0]
            new_column_names += [col_name + '_' + var for var in ['x', 'y', 'z']]
    return pd.DataFrame(data=new_data, columns=new_column_names)


def read_orientations(orientations_file_path):
    """Load body orientation data from an OpenSim ``.sto`` file.

    Parameters
    ----------
    orientations_file_path : Path or str
        Path to ``Analyzer_BodyKinematics_pos_global.sto``.

    Returns
    -------
    pandas.DataFrame
        DataFrame containing only orientation columns.
    """
    df = read_sto_file(orientations_file_path)

    col_names = list(df.columns)
    to_drop = []
    for col_name in col_names:
        if 'O' not in col_name and col_name != 'time':
            to_drop.append(col_name)
    df = df.drop(to_drop, axis=1)
    return df


def load_analysis_data(analyzer_results_path):
    """Convenience wrapper to load all analysis output files.

    Parameters
    ----------
    analyzer_results_path : Path
        Directory containing the analysis ``.sto`` files.

    Returns
    -------
    dict
        Dictionary with keys ``posistions``, ``orientations`` and ``joint_angles``.
    """
    positions = read_positions(str(analyzer_results_path / 'Analyzer_OutputsVec3.sto'))
    orientations = read_orientations(str(analyzer_results_path / 'Analyzer_BodyKinematics_pos_global.sto'))
    joint_angles = read_sto_file(str(analyzer_results_path / 'ik_imu_orientations.mot'))

    return {'posistions': positions, 'orientations': orientations, 'joint_angles': joint_angles}

